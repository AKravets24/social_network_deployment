{"version":3,"sources":["components/content/unAuthorised/unAuthorised.module.css","components/content/unAuthorised/unAuthorised.tsx"],"names":["module","exports","Login","unAuthInfo","authErr","captchaPic","errCaptchaGet","actions","useState","stl","redCrown","crownExtraClass","setCrownExtraClass","className","loginBackground","reactCrown","initialValues","text","email","password","rememberMe","captchaCode","validate","values","errors","test","length","Object","keys","blueCrown","onSubmit","setSubmitting","setMeLoginThunk","loginListener","touched","handleChange","handleBlur","handleSubmit","isSubmitting","AllFormsWrapper","formsWrapper","formInput","type","name","placeholder","onChange","onBlur","value","errorsContainers","captchaDiv","src","alt","htmlFor","disabled","epigraph","LoginContainer","appAC","useSelector","getAppACs","appAuthReducer","getSmartAppAuthReducer","unAuthorisedState","dispatch","useDispatch","unAuthorisedActions","setMeLoginThunkAC","getCaptchaThunk","getCaptchaThunkAC"],"mappings":"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","file":"static/js/9.6fe81efe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBackground\":\"unAuthorised_loginBackground__1Gws7\",\"reactCrown\":\"unAuthorised_reactCrown__1MO7U\",\"redCrown\":\"unAuthorised_redCrown__1gFdO\",\"blueCrown\":\"unAuthorised_blueCrown__2c3ZO\",\"reactCrown-spin\":\"unAuthorised_reactCrown-spin__1ley1\",\"AllFormsWrapper\":\"unAuthorised_AllFormsWrapper__2eT2s\",\"formsWrapper\":\"unAuthorised_formsWrapper__2di9Z\",\"formInput\":\"unAuthorised_formInput__1PbtB\",\"errorsContainers\":\"unAuthorised_errorsContainers__32jym\",\"captchaDiv\":\"unAuthorised_captchaDiv__p_3Bd\",\"epigraph\":\"unAuthorised_epigraph__1GvY_\"};","import React, { useState } from 'react';\r\nimport stl from './unAuthorised.module.css';\r\nimport { Formik, Field } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getAppACs, getSmartAppAuthReducer } from \"../../../redux/selectors\";\r\n\r\ntype UnAuthorisedActions_Type = {\r\n  setMeLoginThunk: (email: string, password: string, rememberMe: boolean, captchaCode: string) => void\r\n  getCaptchaThunk: () => void\r\n}\r\n\r\ntype UnAuthorisedState_Type = { authErr: string, captchaPic: string, errCaptchaGet: string }\r\n\r\nlet LoginContainer = () => {\r\n\r\n  let appAC = useSelector(getAppACs);\r\n  let appAuthReducer = useSelector(getSmartAppAuthReducer);\r\n\r\n  let { authErr, captchaPic, errCaptchaGet } = appAuthReducer\r\n  let unAuthorisedState = { authErr, captchaPic, errCaptchaGet }\r\n\r\n  let dispatch = useDispatch();\r\n  let unAuthorisedActions: UnAuthorisedActions_Type = {\r\n    setMeLoginThunk: (email: string, password: string, rememberMe: boolean, captchaCode: string) => dispatch(appAC.setMeLoginThunkAC(email, password, rememberMe, captchaCode)),\r\n    getCaptchaThunk: () => dispatch(appAC.getCaptchaThunkAC())\r\n  }\r\n\r\n  return <Login actions={unAuthorisedActions} unAuthInfo={unAuthorisedState} />\r\n}\r\n\r\ntype LoginProps_Type = { actions: UnAuthorisedActions_Type, unAuthInfo: UnAuthorisedState_Type }\r\nconst Login: React.FC<LoginProps_Type> = ({ unAuthInfo: { authErr, captchaPic, errCaptchaGet }, actions }) => {\r\n\r\n  const loginListener = (email: string, password: string, rememberMe: boolean, captchaCode: string) => { actions.setMeLoginThunk(email, password, rememberMe, captchaCode) };\r\n\r\n  let [crownExtraClass, setCrownExtraClass] = useState(stl.redCrown)\r\n\r\n  type FormikErrors_Type = { email?: string, password?: string, captchaCode?: string }\r\n  type Value_Type = { text: string, email: string, password: string, captchaCode: string, rememberMe: boolean }\r\n\r\n  let validator = (values: Value_Type) => {\r\n    const errors: FormikErrors_Type = {};\r\n    if (!values.email) { errors.email = 'Required Field'; }\r\n    else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) { errors.email = 'Invalid email address'; }\r\n    if (!values.password) { errors.password = 'Required Field'; }\r\n    else if (values.password.length < 3) { errors.password = 'Set longer pass'; }\r\n\r\n    if (captchaPic) if (!values.captchaCode) { errors.captchaCode = errCaptchaGet }\r\n\r\n    Object.keys(errors).length === 0 ? setCrownExtraClass(stl.blueCrown) : setCrownExtraClass(stl.redCrown)\r\n    return errors;\r\n  }\r\n\r\n  let submitter = (values: Value_Type, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n    let { email, password, rememberMe, captchaCode } = values;\r\n    loginListener(email, password, rememberMe, captchaCode)\r\n    captchaCode = '';\r\n    setSubmitting(false)\r\n  }\r\n\r\n  return <div className={stl.loginBackground}>\r\n    <div className={`${stl.reactCrown} ${crownExtraClass}`} />\r\n\r\n    <h1>Sign in, samurai!</h1>\r\n    <Formik initialValues={{ text: '', email: '', password: '', rememberMe: true, captchaCode: '' }} validate={validator} onSubmit={submitter} >\r\n      {({ values, errors, touched, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\r\n        <form onSubmit={handleSubmit} className={stl.AllFormsWrapper}>\r\n          <div className={stl.formsWrapper}>\r\n            <Field className={stl.formInput} type=\"email\" name=\"email\" placeholder='Your eMail' onChange={handleChange} onBlur={handleBlur} value={values.email} />\r\n            <div className={stl.errorsContainers}>\r\n              <h3> {errors.email && touched.email && errors.email} </h3>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={stl.formsWrapper}>\r\n            <input className={stl.formInput} type=\"password\" name=\"password\" placeholder='Set your password'\r\n              onChange={handleChange} onBlur={handleBlur} value={values.password} />\r\n            <div className={stl.errorsContainers}>\r\n              <h3> {errors.password && touched.password && errors.password} </h3>\r\n              {!captchaPic && <div className={stl.formsWrapper}><h3> {authErr} </h3></div>}\r\n            </div>\r\n          </div>\r\n\r\n          {captchaPic &&\r\n            <div className={stl.captchaDiv}>\r\n              <img src={captchaPic} alt='err' />\r\n              <input className={stl.formInput} type=\"captchaCode\" name=\"captchaCode\" placeholder={errors.captchaCode || 'Insert captcha symbols here'}\r\n                onChange={handleChange} onBlur={handleBlur} value={values.captchaCode} />\r\n            </div>\r\n          }\r\n          <div className={stl.formsWrapper}>\r\n            <Field type=\"checkbox\" name=\"rememberMe\" />\r\n            <label htmlFor=\"rememberMe\" /> Remember Me\r\n          </div>\r\n          <div className={stl.formsWrapper}>\r\n            <button type=\"submit\" disabled={isSubmitting} className={stl.formInput}>Login!</button>\r\n          </div>\r\n          {captchaPic && <div className={stl.formsWrapper}><h3> {authErr} </h3></div>}\r\n        </form>\r\n      )}\r\n    </Formik>\r\n    <div className={stl.epigraph}>\r\n      <h4>You was born in the land of courage and valor</h4>\r\n      <h4>You must fight, samurai, don't give up like a maiden...</h4>\r\n    </div>\r\n  </div>\r\n};\r\n\r\nexport default LoginContainer;\r\n"],"sourceRoot":""}